{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Jupyter Cella": {
		"prefix": "cell",
		"body": [
			"#In[0]$0"
		],
		"description": "Jupyter Cell"
	},
	"Jupyter Cell + Clipboard": {
		"prefix": "cell_clipboard",
		"body": [
			"# In[1]\n${CLIPBOARD}"
		],
		"description": "Jupyter Cell"
	},
	"Function definition + clpboard": {
		"prefix": "def_cb",
		"body": [
			"def ${1:func_name}($2):",
			"\t''' doc string '''\n",
			"\t${CLIPBOARD}\n\t$0"
		],
		"description": "Function definition + clpboard"
	},
	"if + clpboard": {
		"prefix": "if_cb",
		"body": [
			"if ${1:condition}:\n",
			"\t${CLIPBOARD}\n\t$0"
		],
		"description": "if + clpboard"
	},
	"for + clpboard": {
		"prefix": "for_cb",
		"body": [
			"for ${1:list_item} in ${2:expresson_list}:\n",
			"\t${CLIPBOARD}\n\t$0"
		],
		"description": "for loop + clpboard"
	},
	"PySide2 plugin path" : {
		"prefix": "pyside2_plugin_path",
		"body": [
			"import PySide2",
			"plugin_path = os.path.join(os.path.dirname(PySide2.__file__), 'plugins', 'platforms')",
			"os.environ['QT_QPA_PLATFORM_PLUGIN_PATH'] = plugin_path$0"
		]
	},
	"Mock DataFrame ndx" : {
		"prefix": "mock_df_states_ndx",
		"body": [
			"area = pd.Series({'California': 423967, 'Texas': 695662, 'New York': 141297, 'Florida': 170312, 'Illinois': 149995})",
			"pop = pd.Series({'California': 38332521, 'Texas': 26448193, 'New York': 19651127, 'Florida': 19552860, 'Illinois': 12882135})",
			"data = pd.DataFrame({'area':area, 'pop':pop})",
			"data"
		]
	},
	"Mock DataFrame col" : {
		"prefix": "mock_df_states_col",
		"body": [
			"area = pd.Series({0 : 423967, 1: 695662, 2: 141297, 3: 170312, 4: 149995})",
			"pop = pd.Series({0 : 38332521, 1: 26448193, 2: 19651127, 3: 19552860, 4: 12882135})",
			"states = ['California', 'Texas', 'New York', 'Florida', 'Illinois']",
			"data = pd.DataFrame({'states':states, 'area':area, 'pop':pop}, index=range(len(states)))",
			"data"
		]
	},
	"Mock DataFrame abcd" : {
		"prefix": "mock_df_states_abcd",
		"body": [
			"rng = np.random.RandomState(42)",
			"data = pd.DataFrame(rng.randint(0, 10, (3, 4)), columns=['A', 'B', 'C', 'D'])",
			"data"
		]
	},
	"df column number" : {
		"prefix": "df_column_number",
		"body": "${1:df}.columns.get_loc(${2:'ColumnName'})$0"
	},
	"pandas display format" : {
		"prefix": "pandas_options",
		"body": [
			"pd.options.display.max_rows = 10",
			"pd.options.display.max_columns = 15",
			"pd.options.display.float_format = '{:,.2f}'.format"
		]
	},
	"Add module logger" : {
		"prefix": "logger",
		"body": [
			"import logging",
			"logger = logging.getLogger(__name__)"
		]
	},
    "raise_virtual_function_call" : {
		"prefix" : "raise_virtual_function_call",
		"body" : "raise NotImplementedError(f'Calling virtual function in {self.__class__.__name__}')$0"
	},
    "pylint: disable" : {
		"prefix" : "pylint: disable",
		"body" : "# pylint: disable=$0"
	},
    "pylint: disable-next" : {
		"prefix" : "pylint: disable-next",
		"body" : "# pylint: disable-next=$0"
	},
    "pylint: enable" : {
		"prefix" : "pylint: enable",
		"body" : "# pylint: enable=$0"
	},
	"if __name __ == '__main__'" : {
		"prefix" : "if__name__eq__main__",
		"body" : "if __name__ == '__main__':\n\t$0"
	},
	"full property" : {
		"prefix" : "prop_full",
		"body" : [
			"    self._${1:prop_name} = ${2:$1}$0",
			"",
			"@property",
			"def $1(self) -> ${6:typ}:",
			"    return self._$1",
			"",
			"@$1.setter",
			"def $1(self, val: ${6:typ}):",
			"    self._$1 = val"
		],
		"description" : "Python Property (full)"
	},
	"full prop w/ type check" : {
		"prefix" : "prop_full_w_typecheck",
		"body" : [
			"    self._${1:prop_name} = ${2:$1}$0",
			"",
			"@property",
			"def $1(self) -> ${6:typ}:",
			"    return self._$1",
			"",
			"@$1.setter",
			"def $1(self, val: ${6:typ}):",
			"    if not isinstance(val, $6):\n",
			"        raise TypeError(f'Invalid type for `$1`. Expected `$6`.')",
			"    self._$1 = val"
		],
		"description" : "Python Property (full) with typecheck"
	},
    "TODO: " : {
		"prefix" : "TODO:",
		"body" : "# TODO: $0"
	},
    "TODO: w datetime" : {
		"prefix" : "TODO: w datetime",
		"body" : "# TODO: [$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE, $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND]$0"
	},
    "FIXME: " : {
		"prefix" : "FIXME:",
		"body" : "# FIXME: $0"
	},
    "FIXME: w datetime " : {
		"prefix" : "FIXME: w datetime",
		"body" : "# FIXME: [$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE, $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND]$0"
	},
    "START HERE" : {
		"prefix" : "START HERE",
		"body" : "# START HERE: [$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE, $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND]$0"
	},
    "unused argument" : {
		"prefix" : "unused",
		"body" : "del $0 # unused"
	}
}